{"version":3,"sources":["App.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","useState","objectName","setObjectName","isInitialised","setInitialised","runCoco","a","cocossd","net","setInterval","detect","drawRect","detections","ctx","forEach","prediction","x","y","width","height","text","accuracy","color","strokeStyle","fillStyle","lineWidth","font","beginPath","fillText","Math","floor","rect","stroke","current","video","readyState","videoWidth","videoHeight","obj","getContext","useEffect","initWebcam","setTimeout","clearTimeout","WebcamWrapper","ref","muted","style","textAlign","className","position","left","top","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVA+IeA,MAxIf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAFZ,EAGuBE,mBAAS,MAHhC,mBAGNC,EAHM,KAGMC,EAHN,OAI2BF,oBAAS,GAJpC,mBAING,EAJM,KAISC,EAJT,KAOPC,EAAO,uCAAG,4BAAAC,EAAA,sEAEIC,SAFJ,OAERC,EAFQ,OAKdC,aAAY,WACVC,EAAOF,KACN,IAPW,2CAAH,qDAUPG,EAAW,SAACC,EAAYC,GAE5BD,EAAWE,SAAQ,SAACC,GAAe,kBAEHA,EAAU,KAFP,GAE1BC,EAF0B,KAEvBC,EAFuB,KAEpBC,EAFoB,KAEbC,EAFa,KAG3BC,EAAOL,EAAU,MACjBM,EAAWN,EAAU,MAGrBO,EAAQ,UACdT,EAAIU,YAAcD,EAClBT,EAAIW,UAAYF,EAChBT,EAAIY,UAAY,EAChBZ,EAAIa,KAAO,aAGXb,EAAIc,YACJd,EAAIe,SAAJ,UAAgBC,KAAKC,MAAiB,IAAXT,GAA3B,KAA+CL,EAAGC,EAAI,IACtDJ,EAAIe,SAASR,EAAMJ,EAAI,GAAIC,EAAI,IAC/BJ,EAAIkB,KAAKf,EAAGC,EAAGC,EAAOC,GACtBN,EAAImB,SAGJ9B,EAAckB,OAIZV,EAAM,uCAAG,WAAOF,GAAP,uBAAAF,EAAA,yDAGkB,qBAAtBT,EAAUoC,SACK,OAAtBpC,EAAUoC,SAC6B,IAAvCpC,EAAUoC,QAAQC,MAAMC,WALb,wBAQLD,EAAQrC,EAAUoC,QAAQC,MAC1BE,EAAavC,EAAUoC,QAAQC,MAAME,WACrCC,EAAcxC,EAAUoC,QAAQC,MAAMG,YAG5CxC,EAAUoC,QAAQC,MAAMhB,MAAQkB,EAChCvC,EAAUoC,QAAQC,MAAMf,OAASkB,EAGjCtC,EAAUkC,QAAQf,MAAQkB,EAC1BrC,EAAUkC,QAAQd,OAASkB,EAlBhB,UAqBO7B,EAAIE,OAAOwB,GArBlB,QAqBLI,EArBK,OAwBLzB,EAAMd,EAAUkC,QAAQM,WAAW,MAGzC5B,EAAS2B,EAAKzB,GA3BH,4CAAH,sDAoCZ2B,qBAAU,WACRnC,IAEA,IAAMoC,EAAaC,YAAW,kBAAMtC,GAAe,KAAO,MAE1D,OAAO,kBAAMuC,aAAaF,MAEzB,IAEH,IAAMG,EAAgB,WACpB,OAAOzC,EACL,cAAC,IAAD,CACE0C,IAAKhD,EACLiD,OAAO,EAEPC,MAAO,CACLC,UAAW,SACX9B,MAAO,OACPC,OAAQ,UAIZ,+DAIJ,OACE,qBAAK8B,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAACL,EAAD,IACA,wBACEC,IAAK9C,EACLgD,MAAO,CACLG,SAAU,WACVC,KAAM,EACNC,IAAK,EACLJ,UAAW,SACX9B,MAAO,OACPC,OAAQ,aAId,qBAAK8B,UAAU,eAAf,SACE,qBAAKA,UAAU,cAAf,SACE,mBAAGA,UAAU,iBAAb,0EAKJ,qBAAKA,UAAU,yBAAf,SAAyChD,UCpIjDoD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0cb1aa11.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n// import * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n// import { drawRect } from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [objectName, setObjectName] = useState(null);\n  const [isInitialised, setInitialised] = useState(false);\n\n  // Main function\n  const runCoco = async () => {\n    // Load network\n    const net = await cocossd.load();\n\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n\n  const drawRect = (detections, ctx) => {\n    // Loop through each prediction\n    detections.forEach((prediction) => {\n      // Extract boxes and classes\n      const [x, y, width, height] = prediction[\"bbox\"];\n      const text = prediction[\"class\"];\n      const accuracy = prediction[\"score\"];\n\n      // Set styling\n      const color = \"#51ff0d\";\n      ctx.strokeStyle = color;\n      ctx.fillStyle = color;\n      ctx.lineWidth = 3;\n      ctx.font = \"36px Arial\";\n\n      // Draw rectangles and text\n      ctx.beginPath();\n      ctx.fillText(`${Math.floor(accuracy * 100)}%`, x, y - 10);\n      ctx.fillText(text, x + 85, y - 10);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n\n      // Set object name state\n      setObjectName(text);\n    });\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const obj = await net.detect(video);\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // Update drawing utility\n      drawRect(obj, ctx);\n    }\n  };\n\n  // Video Constraints for using back-facing camera\n  // const videoConstraints = {\n  //   facingMode: { exact: \"user\" }\n  // };\n\n  useEffect(() => {\n    runCoco();\n\n    const initWebcam = setTimeout(() => setInitialised(true), 2500);\n\n    return () => clearTimeout(initWebcam);\n    // eslint-disable-next-line\n  }, []);\n\n  const WebcamWrapper = () => {\n    return isInitialised ? (\n      <Webcam\n        ref={webcamRef}\n        muted={true}\n        // videoConstraints={videoConstraints}\n        style={{\n          textAlign: \"center\",\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      />\n    ) : (\n      <div>Initialising your camera...</div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-content\">\n        <div className=\"Video-wrapper\">\n          <WebcamWrapper />\n          <canvas\n            ref={canvasRef}\n            style={{\n              position: \"absolute\",\n              left: 0,\n              top: 0,\n              textAlign: \"center\",\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          />\n        </div>\n        <div className=\"Text-wrapper\">\n          <div className=\"Text-bubble\">\n            <p className=\"Text-paragraph\">\n              Hey NoonGil, please describe what's that in front of me?\n            </p>\n          </div>\n        </div>\n        <div className=\"Text-paragraph-wrapper\">{objectName}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}